name: CI del proyecto

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # 1) Login a Docker Hub
  docker-login:
    runs-on: ubuntu-latest
    outputs:
      logged: ${{ steps.login.outcome }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        id: login
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" \
            | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

  # 2) Build & Push de todos los microservicios
  build-backend:
    needs: docker-login
    runs-on: ubuntu-latest

    # cargamos aquí TODOS los secretos como env
    env:
      DB_HOST:       ${{ secrets.DB_HOST }}
      DB_PORT:       ${{ secrets.DB_PORT }}
      DB_USER:       ${{ secrets.DB_USER }}
      DB_PASS:       ${{ secrets.DB_PASS }}
      DB_NAME:       ${{ secrets.DB_NAME }}
      DB_POOL_MODE:  ${{ secrets.DB_POOL_MODE }}
      PORT_CORE:       ${{ secrets.PORT_CORE }}
      SCHEMA_CORE:     ${{ secrets.SCHEMA_CORE }}
      PORT_CLINICAL:   ${{ secrets.PORT_CLINICAL }}
      SCHEMA_CLINICAL: ${{ secrets.SCHEMA_CLINICAL }}
      PORT_NUTRITION:   ${{ secrets.PORT_NUTRITION }}
      SCHEMA_NUTRITION: ${{ secrets.SCHEMA_NUTRITION }}
      PORT_ODONTO:   ${{ secrets.PORT_ODONTO }}
      SCHEMA_ODONTO: ${{ secrets.SCHEMA_ODONTO }}
      PORT_PATIENT:   ${{ secrets.PORT_PATIENT }}
      SCHEMA_PATIENT: ${{ secrets.SCHEMA_PATIENT }}
      PORT_PHARMACY:   ${{ secrets.PORT_PHARMACY }}
      SCHEMA_PHARMACY: ${{ secrets.SCHEMA_PHARMACY }}
      PORT_VACCINATION:   ${{ secrets.PORT_VACCINATION }}
      SCHEMA_VACCINATION: ${{ secrets.SCHEMA_VACCINATION }}
      PORT_GATEWAY: ${{ secrets.PORT_GATEWAY }}

    strategy:
      matrix:
        include:
          - service: core-service
            port_arg: PORT_CORE
            schema_arg: SCHEMA_CORE
          - service: clinical-service
            port_arg: PORT_CLINICAL
            schema_arg: SCHEMA_CLINICAL
          - service: nutrition-service
            port_arg: PORT_NUTRITION
            schema_arg: SCHEMA_NUTRITION
          - service: odonto-service
            port_arg: PORT_ODONTO
            schema_arg: SCHEMA_ODONTO
          - service: patient-service
            port_arg: PORT_PATIENT
            schema_arg: SCHEMA_PATIENT
          - service: pharmacy-service
            port_arg: PORT_PHARMACY
            schema_arg: SCHEMA_PHARMACY
          - service: vaccination-service
            port_arg: PORT_VACCINATION
            schema_arg: SCHEMA_VACCINATION
          - service: api-gateway
            port_arg: PORT_GATEWAY
            schema_arg: ""              # el gateway no usa schema

    steps:
      - uses: actions/checkout@v4

      - name: Build & Push ${{ matrix.service }}
        run: |
          set -e
          IMAGE=fabiangpsproy/${{ matrix.service }}:latest

          # Nombre de la var que contiene el puerto y el schema en el env
          VAR_PORT="${{ matrix.port_arg }}"
          VAR_SCHEMA="${{ matrix.schema_arg }}"

          # Obtenemos el valor real vía bash indirect expansion
          PORT_VAL="${!VAR_PORT}"
          DOCKER_CMD="docker build \
            -f backend/apps/${{ matrix.service }}/Dockerfile \
            --build-arg DB_HOST=${DB_HOST} \
            --build-arg DB_PORT=${DB_PORT} \
            --build-arg DB_USER=${DB_USER} \
            --build-arg DB_PASS=${DB_PASS} \
            --build-arg DB_NAME=${DB_NAME} \
            --build-arg DB_POOL_MODE=${DB_POOL_MODE} \
            --build-arg ${VAR_PORT}=${PORT_VAL}"

          # Si el servicio define schema_arg, lo agregamos
          if [ -n "$VAR_SCHEMA" ]; then
            SCHEMA_VAL="${!VAR_SCHEMA}"
            DOCKER_CMD="$DOCKER_CMD --build-arg ${VAR_SCHEMA}=${SCHEMA_VAL}"
          fi

          # Etiqueta y contexto
          DOCKER_CMD="$DOCKER_CMD -t $IMAGE backend/"

          # Construcción y push
          eval $DOCKER_CMD
          docker push $IMAGE

  # 3) Build & Push del frontend
  build-frontend:
    needs: docker-login
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build & Push Frontend
        run: |
          IMAGE=fabiangpsproy/frontend:latest
          docker build \
            -f frontend/Dockerfile \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --build-arg NEXT_PUBLIC_SESSION_DURATION=${{ secrets.NEXT_PUBLIC_SESSION_DURATION }} \
            -t $IMAGE \
            frontend/
          docker push $IMAGE
